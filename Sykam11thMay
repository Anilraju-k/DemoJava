package sykamm;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.text.DecimalFormat;
import java.util.Arrays;

import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.xssf.usermodel.XSSFFont;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class TestClass5 {

	static String excelFilePath = "C:\\Users\\1543357\\Documents\\sykam\\Response files and inputsheet\\Inputfile.xlsx";
	static String folderPath = "C:\\Users\\1543357\\Documents\\sykam\\Response files and inputsheet";
	static CellStyle style = null;
	static XSSFFont font = null;

	public static String testCaseName;
	public static String ExposedResponse;
	public static String TransType;
	public static String FolderNameName;
	public static XSSFSheet sheet;
	public static String errorCode;

	public static void main(String[] args) throws Exception {
		
		excecuteExcelTestCases();

	}

	public static void excecuteExcelTestCases() {
	
		try {
			FileInputStream file = new FileInputStream(new File(excelFilePath));
			@SuppressWarnings("resource")
			XSSFWorkbook workbook = new XSSFWorkbook(file);
			sheet = workbook.getSheetAt(0);
			int rowSize = sheet.getPhysicalNumberOfRows();
			System.out.println("No of Test cases present in Excel are : " + (rowSize - 1));
			// sheet.getRow(0).createCell(1).setCellValue("Sykam");
			for (int i = 1; i < rowSize; i++) {
				testCaseName = sheet.getRow(i).getCell(0).getStringCellValue();
				TransType = sheet.getRow(i).getCell(2).getStringCellValue();
				ExposedResponse = sheet.getRow(i).getCell(4).getStringCellValue();
				FolderNameName = sheet.getRow(i).getCell(2).getStringCellValue().substring(8, 20);
				//errorCode=sheet.getRow(i).getCell(7).getStringCellValue();
				validation(i, ExposedResponse, errorCode);
			}
			file.close();
			FileOutputStream out = new FileOutputStream(excelFilePath);
			workbook.write(out);
			out.close();
			System.out.println("Excecution completed");
		} catch (Exception e) {
			e.printStackTrace();
		}

	}

	private static void validation(int i, String exposedResponse, String errorCode2) throws IOException {
		String fileName1 = null;
		String fileName2 = null;
		String fileName3 = null;
	

		if(exposedResponse.contains("Translated good")) {
				//System.out.println("Record from Excel - " + testCaseName);
				File folder = new File(folderPath);
				String[] fileList = folder.list();
				for (String name : fileList) {
					//System.out.println("Record from folder -" + name);
					if (name.equalsIgnoreCase(testCaseName)) {
						File innerFolder = new File(folderPath + "\\" + name + "\\" + FolderNameName);
						String[] innerFileList = innerFolder.list();
			
						String status = "Fail";
						String fileName = "NA";
			
						if (status.equalsIgnoreCase("Fail")) {
							for (String inner : innerFileList) {
								//System.out.println("File present in folder " + inner);
								if (inner.contains("_TRANSLATEDGOOD837_")) {
									status = "pass";
									fileName1 = inner;
								}
								if (inner.contains("_TRANSLATEDGOOD837")) {
									status = "pass";
									fileName2 = inner;
								}
								
								
							}
			
							for (String inner : innerFileList) {
								if (inner.contains("277PER")) {
									status = "Fail";
									fileName3 = inner;
									break;
								}
			
							}
			
						}
						
						if(status.equalsIgnoreCase("Fail")) {							
							sheet.getRow(i).createCell(5).setCellValue("Contains 277PER Files");
							sheet.getRow(i).createCell(6).setCellValue(Arrays.toString(innerFileList));
							sheet.getRow(i).createCell(8).setCellValue(status);
							sheet.getRow(i).createCell(3).setCellValue(FolderNameName);
						}
						else {
							sheet.getRow(i).createCell(5).setCellValue("NA");
							sheet.getRow(i).createCell(6).setCellValue(fileName1 + "  &&  " + fileName2 );
							sheet.getRow(i).createCell(8).setCellValue(status);
							sheet.getRow(i).createCell(3).setCellValue(FolderNameName);
						}
			
					} else {
			
					}
				}
				
		}
		
		
		if(exposedResponse.contains("277PRE")) {
			

			//System.out.println("Record from Excel - " + testCaseName);
			File folder = new File(folderPath);
			String[] fileList = folder.list();
			for (String name : fileList) {
				//System.out.println("Record from folder -" + name);
				if (name.equalsIgnoreCase(testCaseName)) {
					String path=folderPath + "\\" + name + "\\" + FolderNameName;
					File innerFolder = new File(path);
					String[] innerFileList = innerFolder.list();
					String status = "Fail";
					String fileName = "NA";
		
					if (status.equalsIgnoreCase("Fail")) {
						for (String inner : innerFileList) {
							//System.out.println("File present in folder " + inner);
							if (inner.contains("277PRE")) {
								status = "pass";
								fileName1 = inner;
							}
							
						}
		
						for (String inner : innerFileList) {
							if (inner.contains("_TRANSLATEDGOOD837")) {
								status = "Fail";
								fileName2 = inner;
								break;
							}
		
						}
		
					}
					
					if(status.equalsIgnoreCase("Fail")) {							
						sheet.getRow(i).createCell(5).setCellValue("Contains Translated good Files");
						sheet.getRow(i).createCell(6).setCellValue(Arrays.toString(innerFileList));
						sheet.getRow(i).createCell(8).setCellValue(status);
						sheet.getRow(i).createCell(3).setCellValue(FolderNameName);
					}
					else {
						sheet.getRow(i).createCell(5).setCellValue("NA");
						sheet.getRow(i).createCell(6).setCellValue(fileName1);
						errorCode=sheet.getRow(i).getCell(7).getStringCellValue();
						if(!verifyTheErrorCode(path+"\\"+fileName1, errorCode))
							status="fail";
						sheet.getRow(i).createCell(8).setCellValue(status);
						sheet.getRow(i).createCell(3).setCellValue(FolderNameName);
					}
		
				} else {
		
					
				}
			}
			
	
			
		}

	
		
	}

	private static boolean verifyTheErrorCode(String path, String errorCode) throws IOException {
		// TODO Auto-generated method stub
		boolean status = false;
		String line9 = Files.readAllLines(Paths.get(path)).get(8);
		//System.out.println("Line 9 - "+line9);
		if(line9.contains(errorCode)) {
			status = true;
		}
		return status;
	}

	

	
}
